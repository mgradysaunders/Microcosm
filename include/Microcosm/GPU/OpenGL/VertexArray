/*-*- C++ -*-*/
#pragma once

#include "Microcosm/GPU/OpenGL/gl3w"

namespace mi::gl {

struct VertexArray final : Handle<VertexArray> {
public:
  using Handle<VertexArray>::Handle;

  [[nodiscard]] static GLuint allocate() noexcept {
    GLuint handle = 0;
    glGenVertexArrays(1, &handle);
    return handle;
  }

  static void deallocate(GLuint handle) noexcept { glDeleteVertexArrays(1, &handle); }

public:
  void bind() const noexcept { glBindVertexArray(mHandle); }

protected:
  using Handle<VertexArray>::mHandle;
};

template <typename Value> struct VertexAttributeTraits {
  static constexpr size_t size = 1;
  static constexpr GLenum type = enumFor<Value>();
};

template <typename Value, size_t N> struct VertexAttributeTraits<Tensor<Value, TensorShape<N>>> {
  static_assert(N != Dynamic);
  static constexpr size_t size = N;
  static constexpr GLenum type = enumFor<Value>();
};

struct VertexAttributeBinder {

  [[strong_inline]] VertexAttributeBinder &bind( //
    GLint size,
    GLenum type,
    bool normalized = false,
    GLsizei stride = 0,
    GLsizei offset = 0) noexcept {
    glEnableVertexAttribArray(index);
    glVertexAttribPointer(index, size, type, normalized, stride, std::bit_cast<GLvoid *>(GLintptr(offset)));
    index++;
    return *this;
  }

  template <typename Value, typename Class>
  [[strong_inline]] VertexAttributeBinder &bind(Value Class::*member, bool normalized = false) noexcept {
    glEnableVertexAttribArray(index);
    glVertexAttribPointer(
      index,                              //
      VertexAttributeTraits<Value>::size, //
      VertexAttributeTraits<Value>::type, //
      normalized, GLsizei(sizeof(Class)), //
      std::bit_cast<GLvoid *>(member));
    index++;
    return *this;
  }

  GLuint index = 0;
};

} // namespace mi::gl
