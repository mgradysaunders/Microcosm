/*-*- C++ -*-*/
#pragma once

#include "Microcosm/Tensor"
#include "Microcosm/hidden@/memory/StaticStack.h"

namespace mi {

template <std::floating_point Float, size_t N, size_t Degree = 3> struct Bezier final : ArrayLike<Bezier<Float, N, Degree>, /*NegativeFromBack=*/true> {
public:
  constexpr Bezier() noexcept = default;

  template <typename... Args> requires(sizeof...(Args) == Degree + 1 && (std::constructible_from<Vector<Float, N>, Args> && ...)) constexpr Bezier(Args &&...args) : mPoints{Vector<Float, N>(std::forward<Args>(args))...} {}

  template <std::floating_point OtherFloat> explicit constexpr Bezier(const Vector<OtherFloat, N> *values) noexcept {
    if (values) std::copy(values, values + Degree + 1, &mPoints[0]);
  }

  template <std::floating_point OtherFloat, size_t OtherN> [[nodiscard]] constexpr operator Bezier<OtherFloat, OtherN, Degree>() const noexcept {
    Bezier<OtherFloat, OtherN, Degree> bezier;
    for (size_t i = 0; i < Degree + 1; i++) bezier[i] = Vector<OtherFloat, OtherN>(mPoints[i]);
    return bezier;
  }

public:
  MI_ARRAY_LIKE_CONSTEXPR_DATA(&mPoints[0])

  MI_ARRAY_LIKE_STATIC_CONSTEXPR_SIZE(Degree + 1)

public:
  [[nodiscard]] constexpr Vector<Float, N> operator()(Float t) const noexcept {
    if constexpr (Degree == 0) {
      return mPoints[0];
    } else if constexpr (Degree == 1) {
      return lerp(t, mPoints[0], mPoints[1]);
    } else if constexpr (Degree == 2) {
      Float u = 1 - t;
      Float u2 = u * u;
      Float t2 = t * t;
      return u2 * mPoints[0] + (2 * u * t) * mPoints[1] + t2 * mPoints[2];
    } else if constexpr (Degree == 3) {
      Float u = 1 - t;
      Float u2 = u * u, u3 = u * u2;
      Float t2 = t * t, t3 = t * t2;
      return u3 * mPoints[0] + (3 * u2 * t) * mPoints[1] + (3 * u * t2) * mPoints[2] + t3 * mPoints[3];
    } else {
      Bezier<Float, N, Degree - 1> curve0(&mPoints[0]);
      Bezier<Float, N, Degree - 1> curve1(&mPoints[1]);
      return lerp(t, curve0(t), curve1(t));
    }
  }

  /// Increase the degree of the curve.
  [[nodiscard]] constexpr Bezier<Float, N, Degree + 1> increaseDegree() const noexcept requires(Degree > 0) {
    Bezier<Float, N, Degree + 1> curve;
    curve[0] = mPoints[0];
    for (size_t k = 0; k < Degree; k++)
      curve[k + 1] = (Float(k + 1) / Float(Degree + 1)) * mPoints[k] + //
                     (Float(Degree - k) / Float(Degree + 1)) * mPoints[k + 1];
    curve[Degree + 1] = mPoints[Degree];
    return curve;
  }

  /// Decrease the degree of the curve.
  [[nodiscard]] constexpr Bezier<Float, N, Degree - 1> decreaseDegree() const noexcept requires(Degree > 1) {
    if constexpr (Degree == 2)
      return Bezier<Float, N, 1>{mPoints[0], mPoints[2]};
    else {
      // Just in case it isn't ideally reducible, average the
      // forward and reverse formulations.
      // TODO Is reverse correct?
      Bezier<Float, N, Degree - 1> curveA, curveB;
      curveA[0] = mPoints[0];
      curveB[0] = mPoints[0];
      for (size_t k = 1, l = Degree - 2; k < Degree - 1; k++, l--) {
        const Float coeffA0 = Float(Degree) / Float(Degree - k);
        const Float coeffA1 = Float(k) / Float(Degree - k);
        const Float coeffB0 = Float(Degree) / Float(l + 1);
        const Float coeffB1 = Float(Degree) / Float(l + 1) - 1;
        curveA[k] = coeffA0 * mPoints[k] - coeffA1 * curveA[k - 1];
        curveB[l] = coeffB0 * mPoints[l] - coeffB1 * curveB[l + 1];
      }
      curveA[Degree - 1] = mPoints[Degree];
      curveB[Degree - 1] = mPoints[Degree];
      for (size_t k = 1; k < Degree - 1; k++) {
        curveA[k] *= Float(0.5);
        curveA[k] += Float(0.5) * curveB[k];
      }
      return curveA;
    }
  }

  /// Derivative.
  template <size_t J = 1> [[nodiscard, strong_inline]] constexpr Bezier<Float, N, Degree - J> derivative() const noexcept requires(Degree >= J) {
    if constexpr (J == 0) return *this;
    if constexpr (J == 1) {
      Bezier<Float, N, Degree - 1> curve;
      for (size_t k = 0; k < Degree; k++) curve[k] = Float(Degree) * (mPoints[k + 1] - mPoints[k]);
      return curve;
    }
    if constexpr (J >= 2) {
      return derivative<J - 1>().derivative();
    }
  }

  /// Polynomial coefficient.
  template <size_t J> [[nodiscard, strong_inline]] constexpr Vector<Float, N> coefficient() const noexcept requires(Degree >= J) {
    constexpr auto weights = []() constexpr {
      Vector<Float, J + 1> weights{};
      for (size_t i = 0; i <= J; i++)
        weights[i] = Float(factorial(Degree)) * (((i + J) & 1) ? -1 : +1) / //
                     Float(factorial(Degree - J) * factorial(i) * factorial(J - i));
      return weights;
    }();
    Vector<Float, N> result;
    for (size_t i = 0; i <= J; i++) result += weights[i] * mPoints[i];
    return result;
  }

  [[nodiscard]] constexpr Bezier reverse() const noexcept {
    Bezier curve = *this;
    std::reverse(curve.begin(), curve.end());
    return curve;
  }

  /// Subset on range.
  [[nodiscard]] constexpr Bezier subsetBefore(Float t) const noexcept {
    if constexpr (Degree == 0) {
      return *this;
    } else if constexpr (Degree == 1) {
      return {mPoints[0], lerp(t, mPoints[0], mPoints[1])};
    } else if constexpr (Degree == 2) {
      Vector<Float, N> tmp0 = lerp(t, mPoints[0], mPoints[1]);
      Vector<Float, N> tmp1 = lerp(t, mPoints[1], mPoints[2]);
      return {mPoints[0], tmp0, Vector<Float, N>(lerp(t, tmp0, tmp1))};
    } else {
      Bezier curve;
      curve.mPoints[0] = mPoints[0];
      Vector<Float, N> tmpControls[2 * (Degree + 1)]{};
      Vector<Float, N> *tmpControls0 = &tmpControls[0];
      Vector<Float, N> *tmpControls1 = &tmpControls[Degree + 1];
      for (size_t k = 0; k < Degree + 1; k++) tmpControls0[k] = mPoints[k];
      for (size_t j = 1; j < Degree + 1; j++) {
        for (size_t k = 0; k < Degree + 1 - j; k++) //
          tmpControls1[k] = lerp(t, tmpControls0[k], tmpControls0[k + 1]);
        curve.mPoints[j] = tmpControls1[0];
        std::swap(tmpControls0, tmpControls1);
      }
      return curve;
    }
  }

  [[nodiscard]] constexpr Bezier subsetAfter(Float t) const noexcept { //
    return reverse().subsetBefore(1 - t).reverse();
  }

  /// Subset on range.
  [[nodiscard]] constexpr Bezier subset(Float t0, Float t1) const noexcept { return t0 <= t1 ? subsetBefore(t1).subsetAfter(t0 * t1) : subsetBefore(t0).subsetAfter(t0 * t1).reverse(); }

  /// Cut at parameter.
  [[nodiscard]] constexpr std::pair<Bezier, Bezier> cut(Float t) const noexcept { return {subsetBefore(t), subsetAfter(t)}; }

  /// Curvature at parameter.
  [[nodiscard]] Float curvature(Float t) const noexcept {
    if constexpr (Degree >= 2)
      return length(this->template derivative<2>()(t));
    else
      return 0;
  }

  struct Nearest {
    /// The point.
    Vector<Float, N> point{};

    /// The parameter of the point.
    Float param{};
  };

  [[nodiscard]] Nearest nearestTo(Vector<Float, N> point, Float tolerance = 1e-4) const noexcept {
    if constexpr (Degree == 0) {
      return {mPoints[0], 0};
    } else if constexpr (Degree == 1) {
      auto nearest{Line<Float, N>(mPoints[0], mPoints[1]).nearestTo(point)};
      return Nearest{Vector<Float, N>(nearest.point), Float(nearest.param)};
    } else if constexpr (std::same_as<Float, float>) {
      auto nearest{Bezier<double, N, Degree>(*this).nearestTo(Vector<double, N>(point), double(tolerance))};
      return Nearest{Vector<float, N>(nearest.point), float(nearest.param)};
    } else {
      /*  Find nearest point numerically using Newton-Raphson
          iteration on the derivative of the square distance function,
          in order to minimize it to zero. We factor roots out of
          the function as we find them to make sure we get the
          closest one.
       */
      Vector<Float, N> bestPoint{};
      Float bestParam{-1};
      Float bestDistSq{constants::Inf<Float>};
      auto maybeUpdateBest{[&](Float thisParam) {
        if (thisParam = saturate(thisParam); abs(thisParam - bestParam) > tolerance) { // Different solution?
          auto thisPoint = operator()(thisParam);
          auto thisDistSq = distanceSquare(point, thisPoint);
          if (bestDistSq > thisDistSq) {
            bestDistSq = thisDistSq;
            bestPoint = thisPoint;
            bestParam = thisParam;
          }
        }
      }};
      static constexpr size_t MaxRoots{2 * Degree - 1};
      StaticStack<Float, MaxRoots> roots;
      auto derivative1{derivative()};
      auto derivative2{derivative1.derivative()};
      for (size_t seed = 0; seed < MaxRoots; seed++) {
        Float param{(seed + Float(0.5)) / Float(MaxRoots)};
        Float minCoord{-constants::Inf<Float>};
        Float maxCoord{+constants::Inf<Float>};
        Float targetValue{0};
        if (solveNewton(param, minCoord, maxCoord, targetValue, tolerance, [&](Float t) -> std::pair<Float, Float> {
              Vector<Float, N> point0{operator()(t) - point};
              Vector<Float, N> point1{derivative1(t)};
              Vector<Float, N> point2{derivative2(t)};
              Float value{dot(point0, point1)};
              Float deriv{dot(point0, point2) + dot(point1, point1)};
              for (Float root : roots) value /= t - root, deriv -= value, deriv /= t - root;
              return {value, deriv};
            })) {
          maybeUpdateBest(param);
          roots.push(param);
        }
      }
      maybeUpdateBest(0.0);
      maybeUpdateBest(1.0);
      return {bestPoint, bestParam};
    }
  }

  void onTransform(auto &&transform) {
    for (auto &point : mPoints) point = transform.applyAffine(point);
  }

private:
  Vector<Float, N> mPoints[Degree + 1]{};
};

template <std::floating_point Float, size_t Degree> using Bezier1 = Bezier<Float, 1, Degree>;

template <std::floating_point Float, size_t Degree> using Bezier2 = Bezier<Float, 2, Degree>;

template <std::floating_point Float, size_t Degree> using Bezier3 = Bezier<Float, 3, Degree>;

template <size_t Degree> using Bezier1f = Bezier1<float, Degree>;

template <size_t Degree> using Bezier2f = Bezier2<float, Degree>;

template <size_t Degree> using Bezier3f = Bezier3<float, Degree>;

template <size_t Degree> using Bezier1d = Bezier1<double, Degree>;

template <size_t Degree> using Bezier2d = Bezier2<double, Degree>;

template <size_t Degree> using Bezier3d = Bezier3<double, Degree>;

} // namespace mi
