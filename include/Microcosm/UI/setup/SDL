/*-*- C++ -*-*/
#pragma once

#include "Microcosm/UI/Context"

#include <SDL2/SDL_events.h>
#include <SDL2/SDL_keyboard.h>
#include <SDL2/SDL_mouse.h>
#include <SDL2/SDL_scancode.h>

namespace mi::ui {

template <std::convertible_to<SDL_Window *> Window> struct ContextInit<Window> {
  void operator()(Context &context, SDL_Window *window) {
    context.doInput = [&, window] {
      uint32_t flags = SDL_GetWindowFlags(window);
      int sizeX = 0;
      int sizeY = 0;
      SDL_GetWindowSize(window, &sizeX, &sizeY);
      context.screen.screenSize[0] = sizeX;
      context.screen.screenSize[1] = sizeY;
      context.screen.setIsShown(flags & SDL_WINDOW_SHOWN);
      context.screen.setIsFocused(flags & SDL_WINDOW_INPUT_FOCUS);
      int displayIndex = SDL_GetWindowDisplayIndex(window);
      if (displayIndex >= 0) {
        /* TODO The SDL_GetDisplayDPI() call is not entirely reliable,
                but this is apparently being fixed in SDL3, so eventually
                revisit this */
        /*
        float resolutionX = 0;
        float resolutionY = 0;
        if (SDL_GetDisplayDPI(displayIndex, nullptr, &resolutionX, &resolutionY) >= 0) {
          context.display.pixelsPerInch[0] = resolutionX;
          context.display.pixelsPerInch[1] = resolutionY;
        } else {
          SDL_DisplayMode displayMode;
          if (SDL_GetDisplayMode(displayIndex, 0, &displayMode) >= 0) {
            if (displayMode.w >= 3840) {
              context.display.pixelsPerInch[0] = 280;
              context.display.pixelsPerInch[1] = 280;
            } else if (displayMode.w >= 2560) {
              context.display.pixelsPerInch[0] = 186;
              context.display.pixelsPerInch[1] = 186;
            } else {
              context.display.pixelsPerInch[0] = 140;
              context.display.pixelsPerInch[1] = 140;
            }
          }
        } */
      }
      static constexpr std::pair<Key, uint32_t> keymap[] = {
        {Key::A, SDL_SCANCODE_A},                     //
        {Key::B, SDL_SCANCODE_B},                     //
        {Key::C, SDL_SCANCODE_C},                     //
        {Key::D, SDL_SCANCODE_D},                     //
        {Key::E, SDL_SCANCODE_E},                     //
        {Key::F, SDL_SCANCODE_F},                     //
        {Key::G, SDL_SCANCODE_G},                     //
        {Key::H, SDL_SCANCODE_H},                     //
        {Key::I, SDL_SCANCODE_I},                     //
        {Key::J, SDL_SCANCODE_J},                     //
        {Key::K, SDL_SCANCODE_K},                     //
        {Key::L, SDL_SCANCODE_L},                     //
        {Key::M, SDL_SCANCODE_M},                     //
        {Key::N, SDL_SCANCODE_N},                     //
        {Key::O, SDL_SCANCODE_O},                     //
        {Key::P, SDL_SCANCODE_P},                     //
        {Key::Q, SDL_SCANCODE_Q},                     //
        {Key::R, SDL_SCANCODE_R},                     //
        {Key::S, SDL_SCANCODE_S},                     //
        {Key::T, SDL_SCANCODE_T},                     //
        {Key::U, SDL_SCANCODE_U},                     //
        {Key::V, SDL_SCANCODE_V},                     //
        {Key::W, SDL_SCANCODE_W},                     //
        {Key::X, SDL_SCANCODE_X},                     //
        {Key::Y, SDL_SCANCODE_Y},                     //
        {Key::Z, SDL_SCANCODE_Z},                     //
        {Key::Num0, SDL_SCANCODE_0},                  //
        {Key::Num1, SDL_SCANCODE_1},                  //
        {Key::Num2, SDL_SCANCODE_2},                  //
        {Key::Num3, SDL_SCANCODE_3},                  //
        {Key::Num4, SDL_SCANCODE_4},                  //
        {Key::Num5, SDL_SCANCODE_5},                  //
        {Key::Num6, SDL_SCANCODE_6},                  //
        {Key::Num7, SDL_SCANCODE_7},                  //
        {Key::Num8, SDL_SCANCODE_8},                  //
        {Key::Num9, SDL_SCANCODE_9},                  //
        {Key::Numpad0, SDL_SCANCODE_KP_0},            //
        {Key::Numpad1, SDL_SCANCODE_KP_1},            //
        {Key::Numpad2, SDL_SCANCODE_KP_2},            //
        {Key::Numpad3, SDL_SCANCODE_KP_3},            //
        {Key::Numpad4, SDL_SCANCODE_KP_4},            //
        {Key::Numpad5, SDL_SCANCODE_KP_5},            //
        {Key::Numpad6, SDL_SCANCODE_KP_6},            //
        {Key::Numpad7, SDL_SCANCODE_KP_7},            //
        {Key::Numpad8, SDL_SCANCODE_KP_8},            //
        {Key::Numpad9, SDL_SCANCODE_KP_9},            //
        {Key::F1, SDL_SCANCODE_F1},                   //
        {Key::F2, SDL_SCANCODE_F2},                   //
        {Key::F3, SDL_SCANCODE_F3},                   //
        {Key::F4, SDL_SCANCODE_F4},                   //
        {Key::F5, SDL_SCANCODE_F5},                   //
        {Key::F6, SDL_SCANCODE_F6},                   //
        {Key::F7, SDL_SCANCODE_F7},                   //
        {Key::F8, SDL_SCANCODE_F8},                   //
        {Key::F9, SDL_SCANCODE_F9},                   //
        {Key::F10, SDL_SCANCODE_F10},                 //
        {Key::F11, SDL_SCANCODE_F11},                 //
        {Key::F12, SDL_SCANCODE_F12},                 //
        {Key::Esc, SDL_SCANCODE_ESCAPE},              //
        {Key::Tab, SDL_SCANCODE_TAB},                 //
        {Key::LCtrl, SDL_SCANCODE_LCTRL},             //
        {Key::RCtrl, SDL_SCANCODE_RCTRL},             //
        {Key::LAlt, SDL_SCANCODE_LALT},               //
        {Key::RAlt, SDL_SCANCODE_RALT},               //
        {Key::LGui, SDL_SCANCODE_LGUI},               //
        {Key::RGui, SDL_SCANCODE_RGUI},               //
        {Key::LShift, SDL_SCANCODE_LSHIFT},           //
        {Key::RShift, SDL_SCANCODE_RSHIFT},           //
        {Key::Up, SDL_SCANCODE_UP},                   //
        {Key::Down, SDL_SCANCODE_DOWN},               //
        {Key::Left, SDL_SCANCODE_LEFT},               //
        {Key::Right, SDL_SCANCODE_RIGHT},             //
        {Key::Grave, SDL_SCANCODE_GRAVE},             //
        {Key::Minus, SDL_SCANCODE_MINUS},             //
        {Key::Equals, SDL_SCANCODE_EQUALS},           //
        {Key::Backspace, SDL_SCANCODE_BACKSPACE},     //
        {Key::LeftBrack, SDL_SCANCODE_LEFTBRACKET},   //
        {Key::RightBrack, SDL_SCANCODE_RIGHTBRACKET}, //
        {Key::Backslash, SDL_SCANCODE_BACKSLASH},     //
        {Key::Semicolon, SDL_SCANCODE_SEMICOLON},     //
        {Key::Apostrophe, SDL_SCANCODE_APOSTROPHE},   //
        {Key::Return, SDL_SCANCODE_RETURN},           //
        {Key::Comma, SDL_SCANCODE_COMMA},             //
        {Key::Period, SDL_SCANCODE_PERIOD},           //
        {Key::Slash, SDL_SCANCODE_SLASH},             //
        {Key::Space, SDL_SCANCODE_SPACE},             //
        {Key::Delete, SDL_SCANCODE_DELETE},           //
        {Key::Home, SDL_SCANCODE_HOME},               //
        {Key::PageUp, SDL_SCANCODE_PAGEUP},           //
        {Key::PageDown, SDL_SCANCODE_PAGEDOWN},       //
        {Key::End, SDL_SCANCODE_END},                 //
      };

      auto *keys = SDL_GetKeyboardState(nullptr);
      for (auto [key0, key1] : keymap) {
        context.keyboard[key0].set(keys[key1]);
      }

      SDL_PumpEvents();
      SDL_Event events[4];
      int eventCount = SDL_PeepEvents(&events[0], 4, SDL_PEEKEVENT, SDL_TEXTINPUT, SDL_TEXTINPUT);
      for (int eventIndex = 0; eventIndex < eventCount; eventIndex++)
        context.keyboard.inputText += &events[eventIndex].text.text[0];
      eventCount = SDL_PeepEvents(&events[0], 4, SDL_PEEKEVENT, SDL_MOUSEWHEEL, SDL_MOUSEWHEEL);
      for (int eventIndex = 0; eventIndex < eventCount; eventIndex++) {
        auto &wheel = events[eventIndex].wheel;
#if SDL_COMPILEDVERSION >= 2018L
        context.mouse.input.scroll[0] += wheel.preciseX;
        context.mouse.input.scroll[1] += wheel.preciseY;
#else
        context.mouse.input.scroll[0] += wheel.x < 0 ? -1 : wheel.x > 0 ? 1 : 0;
        context.mouse.input.scroll[1] += wheel.y < 0 ? -1 : wheel.y > 0 ? 1 : 0;
#endif // #if SDL_COMPILEDVERSION >= 2018L
      }

      int x = 0;
      int y = 0;
      uint32_t mask = SDL_GetMouseState(&x, &y);
      context.mouse.input.position[0] = x;
      context.mouse.input.position[1] = sizeY - y - 1; // Screen convention difference!
      context.mouse[Mouse::Button::L].set(mask & SDL_BUTTON_LMASK);
      context.mouse[Mouse::Button::M].set(mask & SDL_BUTTON_MMASK);
      context.mouse[Mouse::Button::R].set(mask & SDL_BUTTON_RMASK);
      context.mouse[Mouse::Button::X1].set(mask & SDL_BUTTON_X1MASK);
      context.mouse[Mouse::Button::X2].set(mask & SDL_BUTTON_X2MASK);
    };
    context.getClipboardText = [] {
      std::string textString;
      if (SDL_HasClipboardText()) {
        char *text = SDL_GetClipboardText();
        textString = text, SDL_free(text);
      }
      return textString;
    };
    context.setClipboardText = [](std::string text) { SDL_SetClipboardText(text.c_str()); };
  }
};

} // namespace mi::ui
