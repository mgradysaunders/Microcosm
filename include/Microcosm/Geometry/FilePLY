/*-*- C++ -*-*/
#pragma once

#include <map>
#include <string>
#include <string_view>
#include <vector>

#include "Microcosm/Geometry/common"

namespace mi::geometry {

class MI_GEOMETRY_API FilePLY {
public:
  using Buffer2 = std::vector<Vector2f>;

  using Buffer3 = std::vector<Vector3f>;

public:
  FilePLY() noexcept = default;

  explicit FilePLY(const std::string &filename) { read(filename); }

  void read(const std::string &filename);

  void read(std::istream &stream);

  void write(const std::string &filename) const;

  void write(std::ostream &stream) const;

  void clear() noexcept {
    positions.clear();
    texcoords.clear();
    normals.clear();
    colors.clear();
    faceSizes.clear();
    faceIndexes.clear();
  }

  void triangulate();

  void normalizeNormals();

public:
  /// The vertex positions.
  Buffer3 positions;

  /// The vertex texture coordinates (optional).
  Buffer2 texcoords;

  /// The vertex normals (optional).
  Buffer3 normals;

  /// The vertex colors (optional).
  Buffer3 colors;

  /// The per-face sizes.
  std::vector<uint8_t> faceSizes;

  /// The per-face indexes.
  std::vector<uint32_t> faceIndexes;

  /// The number of faces.
  [[nodiscard]] size_t numFaces() const noexcept { return faceSizes.size(); }
};

} // namespace mi::geometry
