/*-*- C++ -*-*/
#pragma once

#include "Microcosm/Render/common"

namespace mi::render {

struct MI_RENDER_API Perspective final {
public:
  void initializeFromFOVAndSize(double fov, Vector2d size) noexcept {
    imageA = 0.5 * +size;
    imageB = 0.5 * -size;
    focalLen = 0.5 * abs(size[1]) / tan(0.5 * fov);
  }

  void initializeFromFOVAndAspectRatio(double fov, double aspectRatio) noexcept {
    initializeFromFOVAndSize(fov, {1.0, 1.0 / aspectRatio});
  }

  void takeSubsetOfImage(Vector2d fractionA, Vector2d fractionB) noexcept {
    fractionA = lerp(fractionA, imageA, imageB);
    fractionB = lerp(fractionB, imageA, imageB);
    imageA = fractionA;
    imageB = fractionB;
  }

  void flipImageX() noexcept { std::swap(imageA[0], imageB[0]); }

  void flipImageY() noexcept { std::swap(imageA[1], imageB[1]); }

  [[nodiscard]] double imageArea() const noexcept { return abs(imageB - imageA).product(); }

  [[nodiscard]] double solidAnglePDF(Vector3d omegaI) const noexcept {
    if (omegaI[2] < 0) {
      Vector3d pointP{
        focalLen * omegaI[0] / omegaI[2], //
        focalLen * omegaI[1] / omegaI[2], //
        focalLen};
      Vector3d pointQ{0, 0, 0};
      if (
        imageA[0] <= pointP[0] && pointP[0] <= imageB[0] && //
        imageA[1] <= pointP[1] && pointP[1] <= imageB[1])
        return 1 / imageArea() * convertAreaToSolidAngle(pointQ, pointP, Vector3d(0, 0, 1));
    }
    return 0;
  }

  [[nodiscard]] double solidAngleSample(Vector2d sampleU, Vector3d &omegaI) const noexcept {
    Vector3d pointP{
      lerp(sampleU[0], imageA[0], imageB[0]), //
      lerp(sampleU[1], imageA[1], imageB[1]), //
      focalLen};
    Vector3d pointQ{0, 0, 0};
    omegaI = normalize(pointQ - pointP);
    return 1 / imageArea() * convertAreaToSolidAngle(pointQ, pointP, Vector3d(0, 0, 1));
  }

  [[nodiscard]] Vector2d invert(Vector3d omegaI) const noexcept {
    Vector3d pointP{
      focalLen * omegaI[0] / omegaI[2], //
      focalLen * omegaI[1] / omegaI[2], //
      focalLen};
    return {unlerp(pointP[0], imageA[0], imageB[0]), unlerp(pointP[1], imageA[1], imageB[1])};
  }

public:
  Vector2d imageA{-1, -1};

  Vector2d imageB{+1, +1};

  double focalLen{1};
};

} // namespace mi::render
