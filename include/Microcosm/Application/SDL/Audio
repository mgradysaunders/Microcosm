/*-*- C++ -*-*/
#pragma once

#include "Microcosm/Application/SDL/common"

#include <SDL2/SDL_audio.h>

namespace mi::SDL {

struct MI_SDL_API Audio {
public:
  Audio() = delete;

  enum class Mode : int { Output = 0, Input = 1 };
};

struct MI_SDL_API AudioStream {
public:
  struct Params {
    SDL_AudioFormat format{};
    int channels{2};
    int sampleRate{44100};
  };

  AudioStream() noexcept = default;

  AudioStream(const AudioStream &) = delete;

  AudioStream(AudioStream &&other) noexcept : stream(steal(other.stream)) {}

  explicit AudioStream(const Params &srcParams, const Params &dstParams)
    : stream(SDL_NewAudioStream(
        srcParams.format,
        srcParams.channels,
        srcParams.sampleRate,
        dstParams.format,
        dstParams.channels,
        dstParams.sampleRate)) {
    if (!stream) throwError();
  }

  AudioStream &operator=(const AudioStream &) = delete;

  AudioStream &operator=(AudioStream &&other) noexcept {
    stream = steal(other.stream);
    return *this;
  }

  ~AudioStream() {
    SDL_FreeAudioStream(stream);
    stream = nullptr;
  }

  [[nodiscard]] int put(const void *buf, int len);

  [[nodiscard]] int get(void *buf, int len);

  [[nodiscard]] int available();

  void flush();

  void clear() noexcept;

  SDL_AudioStream *stream{nullptr};
};

} // namespace mi::SDL
